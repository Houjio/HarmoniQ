import numpy as np

class IndustrialBattery:
    def __init__(self, capacity_kWh, max_power_kW, efficiency=0.95, self_discharge=0.0002, lifetime_years=15):
        """ Initialize battery model """
        self.capacity = capacity_kWh  # kWh
        self.max_power = max_power_kW  # kW
        self.efficiency = efficiency  # Charge/discharge efficiency
        self.self_discharge = self_discharge  # Self-discharge per day
        self.age = 0  # Years of operation
        self.degradation_rate = 0.025  # 2.5% capacity loss per year
        self.initial_capacity = capacity_kWh
        self.soc = 0  # Initial state of charge (kWh)
        self.lifetime_years = lifetime_years  # Expected lifetime

    def charge(self, power_input, dt=1):
        """ Charge battery with available power input (kW) over time step dt (hours) """
        power_input = min(power_input, self.max_power)  # Limit by max charge power
        energy_added = power_input * dt * self.efficiency  # Apply efficiency
        self.soc = min(self.soc + energy_added, self.capacity)  # Limit by capacity
        return energy_added

    def discharge(self, demand, dt=1):
        """ Discharge to meet demand (kW) over time step dt (hours) """
        power_output = min(demand, self.max_power, self.soc / dt)  # Limit by power & SOC
        energy_supplied = power_output * dt / self.efficiency  # Apply efficiency loss
        self.soc = max(self.soc - energy_supplied, 0)  # Update SOC
        return power_output

    def apply_self_discharge(self, days=1):
        """ Apply battery self-discharge loss over time """
        loss = self.soc * (1 - (1 - self.self_discharge) ** days)
        self.soc = max(self.soc - loss, 0)  # Update SOC

    def age_battery(self, years=1):
        """ Simulate battery aging over time (capacity & efficiency degradation) """
        self.age += years
        degradation_factor = (1 - self.degradation_rate) ** self.age
        self.capacity = self.initial_capacity * degradation_factor  # Reduce capacity
        self.efficiency = max(0.85, self.efficiency * degradation_factor)  # Efficiency loss (min 85%)
    
    def estimate_costs(self, install_cost_per_kWh=250, maintenance_per_kWh=15):
        """ Estimate installation and operational costs """
        capex = self.initial_capacity * install_cost_per_kWh  # Installation cost
        opex = maintenance_per_kWh * self.initial_capacity * self.lifetime_years  # Lifetime maintenance
        return {"CapEx": capex, "OpEx": opex, "Total Cost": capex + opex}

    def get_state(self):
        return {
            "SOC (kWh)": self.soc, 
            "SOC (%)": round(self.soc / self.capacity * 100, 2),
            "Capacity Remaining (kWh)": round(self.capacity, 2),
            "Efficiency (%)": round(self.efficiency * 100, 2),
            "Age (years)": self.age
        }

# Example: 10 MWh battery with 5 MW max power
battery = IndustrialBattery(capacity_kWh=10_000, max_power_kW=5000)

# Simulate 5 years of operation
for year in range(5):
    battery.age_battery(years=1)  # Apply aging

# Charging with 3000 kW for 2 hours
battery.charge(3000, dt=2)

# Discharging with 4000 kW demand for 1 hour
battery.discharge(4000, dt=1)

# Apply self-discharge over a week
battery.apply_self_discharge(days=7)

# Get battery status
print(battery.get_state())

# Estimate costs
costs = battery.estimate_costs()
print(costs)

{
    'SOC (kWh)': 5800.0,
    'SOC (%)': 65.91,
    'Capacity Remaining (kWh)': 8718.65,
    'Efficiency (%)': 90.89,
    'Age (years)': 5
}
{
    'CapEx': 2500000,
    'OpEx': 1500000,
    'Total Cost': 4000000
}
